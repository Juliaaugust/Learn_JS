<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <link rel="stylesheet" href="../../css/bootstrap.min.css">
  <link rel="stylesheet" href="../../css/task_lesson.css">
  <link rel="stylesheet" href="../../css/style.css">
  <link rel="stylesheet" href="../../css/profile.css">

  <script src="../../js/jquery.js"></script>
  <script src="../../js/profile.js"></script>

  <title>Уровень 1 | Урок <%= lessonNum %></title>
</head>
<body>

<% include ../blocks/header_user.ejs %>

  <div class="container-fluid lesson_num">
    <div class="container">
      <div class="level">Уровень 1</div>
      <div class="lesson">Урок <%= lessonNum %></div>
    </div>
  </div>

  <div class="container main-container">
    <h3 class="header">Математические операции и константы в языке JavaScript</h3>
    <p class="main_text">Для работы с переменными, со значениями, JavaScript поддерживает все стандартные операторы,
      большинство которых есть и в других языках программирования. Есть пять основных операций: сложение, вычитание,
      умножение, деление и остаток от деления. Ещё есть скобки, как и в обычной математике, которые помогают явно
      указывать последовательность вычислений.</p>
    <p class="main_text">Рассмотрим выражение: 25 * 91.</p>
    <p class="main_text">Здесь 25 и 91 называются <b>операндами</b>, а звёздочка - <b>оператором</b> умножения.</p>
    <p class="main_text">Вот немного более усложнённый пример: ((12 * 5) - 4) / 12.</p>
    <p class="main_text">В начале JavaScript производит умножение, затем вычитает 4, поскольку есть скобки, а потом
      делит результат на 12.</p>
    <p class="main_text">Все операторы здесь <b>инфиксные</b>: они находятся между операндами (в данном случае —
      между числами). Ещё есть <b>префиксные</b> операторы (например, знак минус, который обозначает отрицательное
      число: -5) и <b>постфиксные</b> (например, быстрое увеличение на один: x++).</p>
    <p class="main_text">Также в JavaScript есть несколько терминов, которые нужны для формулировки определённых
      значений: разделите положительное число на 0 и получится "Бесконечность" — <b>Infinity</b>; разделите
      отрицательное число на 0 и получится "-Бесконечность" — <b>-Infinity</b>. В своих программах вы можете
      использовать Бесконечности как числа с другими операторами. Например, с Бесконечностью можно производить сложение.</p>
    <p class="main_text">Иногда вычисления не производят конкретного числа. Разделите 0 на строку и получится что-то
      не числовое. Нельзя сказать, что это ничто, это… просто не число. У JavaScript есть термин для такого понятия —
      <b>NaN</b>, который образован из "Not a Number" (не число). Как и Бесконечность, NaN можно использовать в
      вычислениях с другими математическими операторами. Но Not a Number как бы всех подводит: если он присутствует
      в вычислении, результатом всегда будет NaN.</p>
    <p class="main_text">Рассмотрим простые примеры объвяления чисел: целого и с плавающей точкой.</p>
    <pre class="brush: js line-numbers language-js">
      <code class="language-js">
        <span class="token keyword">var</span> <span class="token name-var">myInt</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
        <br>
        <span class="token keyword">var</span> <span class="token name-var">myFloat</span> <span class="token operator">=</span> <span class="token number">6.667</span><span class="token punctuation">;</span>
        <span aria-hidden="true" class="line-numbers-rows">
          <span></span>
          <span></span>
        </span>
      </code>
    </pre>
    <p class="main_text">Заметьте, что числовые значения набираются без кавычек.</p>
    <p class="main_text">Рассмотрим еще один пример – сохраним результат вычислений в другие переменные.</p>
    <pre class="brush: js line-numbers language-js">
      <code class="language-js">
        <span class="token keyword">var</span> <span class="token name-var">num1</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <br>
        <span class="token keyword">var</span> <span class="token name-var">num2</span> <span class="token operator">=</span> <span class="token number">2.5</span><span class="token punctuation">;</span>
        <br>
        <span class="token keyword">var</span> <span class="token name-var">multiply</span> <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token name-var">num1</span> <span class="token operator">*</span> <span class="token name-var">num2</span><span class="token punctuation">;</span>
        <span aria-hidden="true" class="line-numbers-rows">
          <span></span>
          <span></span>
          <span></span>
        </span>
      </code>
    </pre>
    <p class="main_text">Теперь значение переменной multiply хранит результат умножения чисел num1 и num2, то есть 25, к
      которому прибавлено число 10. Итого, в этой переменной лежит число 35.</p>
    <p class="main_text">Это происходит из-за <b>приоритета операторов</b> - некоторые операторы будут применены
      перед другими в процесс вычисления суммы (в программировании ее называют выражением). Приоритет операторов
      в JavaScript ничем не отличается от приоритета арифметических операций, который вы изучали в школе - умножение
      и деление всегда выполняются первыми, затем сложение и вычитание (сумма всегда вычисляется слева направо).</p>
    <p class="main_text">Если вы хотите переопределить порядок выполнения операторов, вы можете окружить парными
      скобками часть выражения, которая должна быть выполнена первой. Для получения результата 50 следует
      сделать следующее:</p>
    <pre class="brush: js line-numbers language-js">
      <code class="language-js">
        <span class="token keyword">var</span> <span class="token name-var">num1</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <br>
        <span class="token keyword">var</span> <span class="token name-var">num2</span> <span class="token operator">=</span> <span class="token number">2.5</span><span class="token punctuation">;</span>
        <br>
        <span class="token keyword">var</span> <span class="token name-var">multiply</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">+</span> <span class="token name-var">num1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token name-var">num2</span><span class="token punctuation">;</span>
        <span aria-hidden="true" class="line-numbers-rows">
          <span></span>
          <span></span>
          <span></span>
        </span>
      </code>
    </pre>

  <p class="main_text to-task">Теперь, после прохождения данного урока, вы можете решить <a class="to-task" href="/task/1">задачу 1</a>.</p>
      <div class="row">
        <a href="/lesson/4"><button class="btn btn-primary mt-1" type="submit">Пройти дальше</button></a>
      </div>
  </div>
  <% include ./../blocks/footer.ejs %>

</body>
</html>
